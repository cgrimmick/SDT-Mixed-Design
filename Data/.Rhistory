agS[srows,]$SSE = fit$optim$bestval # .0002
for(row in srows) {
agS[row,parnames] = fit$optim$bestmem
}
agS[srows,]$Model = mperf
}
return(agS)
}
sfits = fitBySubject()
sfits = fitBySubject()
sfits = fitBySubject()
source("ReadMturkData.R")
testdat = read.csv("data/initial-accuracy1_test_data.csv", header=T)
testdat = na.omit(testdat) # get rid of the single novel pair tested per subject
get_subj_ord <- function(cur_subj_dat) {
ord = data.matrix(cur_subj_dat[,c(8,9,10,11)]) + 1
return(ord)
}
FitChristSSE <- function(par, humdat, cond, ord) {
mdat = RunFitnevaChristiansenExp(par, cond, ord)
return(sum((humdat - mdat)^2) + .002*sum( (par-c(0,0,1))^2 )) # regularize parameters
}
RunFitnevaChristiansenExp <- function(par, cond, ord) {
# par = c(.2, 2, .95)
# mdat = data.frame(Cond=c("Low IA","Low IA", "High IA", "High IA"),
#                   Item=c("Initially Accurate","Initially Inaccurate","Initially Accurate","Initially Inaccurate"),
#                   Mean=NA, SD=NA)
X = par[1]+par[2]
wordOrder = c(1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16) +1
objOrder =  c(0,2,4,6,8,10,12,14,16,1,3,5,7,9,11,13,15,17) + 1
# familiarization is the same for both conditions (the switching happens after)
fam_m = matrix(0, nrow=18, ncol=18)
for(i in 1:length(wordOrder)) {
fam_m[wordOrder[i],objOrder[i]] = X
}
modp = model(par, ord=ord, m=fam_m) # does the training (on prefam matrix)
acc18afc = rep(NA, 18)
for(j in 1:18){
acc18afc[j] = modp[wordOrder[j],objOrder[j]] / sum(modp[wordOrder[j],])
}
if(cond=="Low Initial Accuracy") {
liawordOrder =  c(16,14,5,10,9,6,13,2,0,17,15,4,11,8,7,12,3,1) + 1
LIA_initInac = which(wordOrder!=liawordOrder)
LIA_initAcc = which(wordOrder==liawordOrder)
#print("Low Initial Accuracy condition (12/18 pairs wrong at familiarization)")
init_inacc = mean(acc18afc[LIA_initInac]) # Low IA Initially Inaccurate
init_acc = mean(acc18afc[LIA_initAcc]) # Low IA Initially Accurate
} else if(cond=="High Initial Accuracy") {
hiawordOrder =  c(1,14,5,10,9,6,13,15,17,0,2,4,11,8,7,12,3,16) + 1
HIA_initInac = which(wordOrder!=hiawordOrder) # initInac item indices in HiIA cond
HIA_initAcc = which(wordOrder==hiawordOrder)
#print("High Initial Accuracy condition (4/10 pairs wrong at familiarization)")
init_inacc = mean(acc18afc[HIA_initInac]) #
init_acc = mean(acc18afc[HIA_initAcc]) #
}
return(c(init_inacc, init_acc))
}
require("DEoptim")
fitBySubject <- function() {
source("proposeverify_model_initacc.R")
subjs <- unique(as.character(testdat$uniqueId))
agS = aggregate(correct ~ condition + init_acc + uniqueId, data=testdat, mean)
parnames = c("alpha","alpha_increase")
agS[,parnames] = NA
agS$SSE = NA
agS$Model = NA
# fit each subject (with appropriate condition), and store the best-fitting parameters per S
for(s in subjs) {
ord = get_subj_ord(subset(study, uniqueId==s))
srows = which(agS$uniqueId==s)
scond = agS[srows,]$condition[1]
sperf = agS[srows,]$correct
fit = DEoptim(FitChristSSE, lower=c(.0001,.0001), upper=c(1,1), DEoptim.control(reltol=.001, NP=100), humdat=sperf, cond=scond, ord=ord) #
mperf = RunFitnevaChristiansenExp(fit$optim$bestmem, scond, ord) # fit$optim$bestmem c(2.0, 0.787, 0.684)
agS[srows,]$SSE = fit$optim$bestval # .0002
for(row in srows) {
agS[row,parnames] = fit$optim$bestmem
}
agS[srows,]$Model = mperf
}
return(agS)
}
sfits = fitBySubject()
testdat = read.csv("data/initial_accuracy1_test_data.csv", header=T)
testdat = na.omit(testdat) # get rid of the single novel pair tested per subject
sfits = fitBySubject()
ord=get_subj_ord
m=fam_m
wordOrder = c(1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16) +1
objOrder =  c(0,2,4,6,8,10,12,14,16,1,3,5,7,9,11,13,15,17) + 1
fam_m = matrix(0, nrow=18, ncol=18)
for(i in 1:length(wordOrder)) {
fam_m[wordOrder[i],objOrder[i]] = X
}
X = par[1]+par[2]
par=c(.5,.5)
X = par[1]+par[2]
fam_m = matrix(0, nrow=18, ncol=18)
for(i in 1:length(wordOrder)) {
fam_m[wordOrder[i],objOrder[i]] = X
}
alpha = params[1] # prob to remember first guess
params <- par
alpha = params[1] # prob to remember first guess
alpha_increase = params[2]
voc_sz = max(unlist(ord), na.rm=TRUE) # vocabulary size
source("ReadMturkData.R")
testdat = read.csv("data/initial_accuracy1_test_data.csv", header=T)
testdat = na.omit(testdat) # get rid of the single novel pair tested per subject
get_subj_ord <- function(cur_subj_dat) {
ord = data.matrix(cur_subj_dat[,c(8,9,10,11)]) + 1
return(ord)
}
FitChristSSE <- function(par, humdat, cond, ord) {
mdat = RunFitnevaChristiansenExp(par, cond, ord)
return(sum((humdat - mdat)^2) + .002*sum( (par-c(0,0,1))^2 )) # regularize parameters
}
RunFitnevaChristiansenExp <- function(par, cond, ord) {
# par = c(.2, 2, .95)
# mdat = data.frame(Cond=c("Low IA","Low IA", "High IA", "High IA"),
#                   Item=c("Initially Accurate","Initially Inaccurate","Initially Accurate","Initially Inaccurate"),
#                   Mean=NA, SD=NA)
X = par[1]+par[2]
wordOrder = c(1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16) +1
objOrder =  c(0,2,4,6,8,10,12,14,16,1,3,5,7,9,11,13,15,17) + 1
# familiarization is the same for both conditions (the switching happens after)
fam_m = matrix(0, nrow=18, ncol=18)
for(i in 1:length(wordOrder)) {
fam_m[wordOrder[i],objOrder[i]] = X
}
modp = model(par, ord=ord, m=fam_m) # does the training (on prefam matrix)
acc18afc = rep(NA, 18)
for(j in 1:18){
acc18afc[j] = modp[wordOrder[j],objOrder[j]] / sum(modp[wordOrder[j],])
}
if(cond=="Low Initial Accuracy") {
liawordOrder =  c(16,14,5,10,9,6,13,2,0,17,15,4,11,8,7,12,3,1) + 1
LIA_initInac = which(wordOrder!=liawordOrder)
LIA_initAcc = which(wordOrder==liawordOrder)
#print("Low Initial Accuracy condition (12/18 pairs wrong at familiarization)")
init_inacc = mean(acc18afc[LIA_initInac]) # Low IA Initially Inaccurate
init_acc = mean(acc18afc[LIA_initAcc]) # Low IA Initially Accurate
} else if(cond=="High Initial Accuracy") {
hiawordOrder =  c(1,14,5,10,9,6,13,15,17,0,2,4,11,8,7,12,3,16) + 1
HIA_initInac = which(wordOrder!=hiawordOrder) # initInac item indices in HiIA cond
HIA_initAcc = which(wordOrder==hiawordOrder)
#print("High Initial Accuracy condition (4/10 pairs wrong at familiarization)")
init_inacc = mean(acc18afc[HIA_initInac]) #
init_acc = mean(acc18afc[HIA_initAcc]) #
}
return(c(init_inacc, init_acc))
}
require("DEoptim")
fitBySubject <- function() {
source("proposeverify_model_initacc.R")
subjs <- unique(as.character(testdat$uniqueId))
agS = aggregate(correct ~ condition + init_acc + uniqueId, data=testdat, mean)
parnames = c("alpha","alpha_increase")
agS[,parnames] = NA
agS$SSE = NA
agS$Model = NA
# fit each subject (with appropriate condition), and store the best-fitting parameters per S
for(s in subjs) {
ord = get_subj_ord(subset(study, uniqueId==s))
srows = which(agS$uniqueId==s)
scond = agS[srows,]$condition[1]
sperf = agS[srows,]$correct
fit = DEoptim(FitChristSSE, lower=c(.0001,.0001), upper=c(1,1), DEoptim.control(reltol=.001, NP=100), humdat=sperf, cond=scond, ord=ord) #
mperf = RunFitnevaChristiansenExp(fit$optim$bestmem, scond, ord) # fit$optim$bestmem c(2.0, 0.787, 0.684)
agS[srows,]$SSE = fit$optim$bestval # .0002
for(row in srows) {
agS[row,parnames] = fit$optim$bestmem
}
agS[srows,]$Model = mperf
}
return(agS)
}
sfits = fitBySubject()
sfits = fitBySubject()
save(sfits, file="subject_fits_withReg_proposeverify.RData")
require("ggplot2")
load("subject_fits_withReg_proposeverify.RData")
agg = aggregate(correct ~ condition + init_acc, data=sfits, mean)
agg$sd = aggregate(correct ~ condition + init_acc, data=sfits, sd)$correct
agg$SE = agg$sd / sqrt(aggregate(correct ~ condition + init_acc, data=sfits, length)$correct - 1)
mag = aggregate(Model ~ condition + init_acc, data=sfits, mean)
mag$sd = aggregate(Model ~ condition + init_acc, data=sfits, sd)$Model
mag$SE = agg$sd / sqrt(aggregate(Model ~ condition + init_acc, data=sfits, length)$Model - 1)
dodge <- position_dodge(width=.9)
limits <- with(agg, aes(ymax=correct+SE, ymin=correct-SE))
a <- ggplot(agg, aes(x=condition, y=correct, fill=init_acc)) + labs(x="Condition", y="Proportion Correct", fill="Initially Accurate") +
geom_bar(stat="identity", position=dodge) + geom_errorbar(limits,  width=0.2, position=dodge) +
geom_point(data=mag, aes(x=condition, y=Model, fill=init_acc), position=dodge) +
geom_hline(yintercept=1/18, linetype='dashed')
print(a)
warnings()
ggsave("initial-accuracy18afc_model_fit_by_subject_proposeverify.pdf", width=5, height=4)
par
par = c(.5,.2)
source("proposeverify_model_initacc.R")
subjs <- unique(as.character(testdat$uniqueId))
agS = aggregate(correct ~ condition + init_acc + uniqueId, data=testdat, mean)
parnames = c("alpha","alpha_increase")
agS[,parnames] = NA
agS$SSE = NA
agS$Model = NA
s =  subjs[1]
s
ord = get_subj_ord(subset(study, uniqueId==s))
srows = which(agS$uniqueId==s)
scond = agS[srows,]$condition[1]
sperf = agS[srows,]$correct
ord = get_subj_ord(subset(study, uniqueId==s))
srows = which(agS$uniqueId==s)
scond = agS[srows,]$condition[1]
sperf = agS[srows,]$correct
RunFitnevaChristiansenExp(c(.5,.2), scond, ord)
RunFitnevaChristiansenExp(c(.5,.5), scond, ord)
orf
ord
voc_sz = max(unlist(ord), na.rm=TRUE) # vocabulary size
ppt = ncol(ord) # pairs per trial
# want an item x occurrence matrix, to be filled in during training
resps = matrix(0, voc_sz, 9)
freq = rep(0,voc_sz) # number of occurrences per pair, so far (to index the resps matrix)
voc_sz
1:nrow(ord)
t=1
params = par
alpha = params[1] # prob to remember first guess
alpha_increase = params[2] # Trueswell 2013 empirically estimates this...
#sa <- params[2] # prob of storage (slow learning down)
voc_sz = max(unlist(ord), na.rm=TRUE) # vocabulary size
ppt = ncol(ord) # pairs per trial
#m <- matrix(0, voc_sz, voc_sz) # hypothesis matrix
# want an item x occurrence matrix, to be filled in during training
resps = matrix(0, voc_sz, 9)
freq = rep(0,voc_sz) # number of occurrences per pair, so far (to index the resps matrix)
#mem_strength = rep(0,voc_sz) # how strong a w's hypothesis is (strengthens if confirmed)
perf = c()
rep=1
t=1
tr_w = ord[t,c("w1ind","w2ind")]
tr_o = ord[t,c("o1ind","o2ind")]
freq[tr_w] = freq[tr_w] + 1
probs = runif(length(tr_w))
forget = tr_w[which(probs > rowSums(m[tr_w,]))]
tr_w
tr_o
sample(c(4), 1)
sample(c(4), 1)
sample(c(4), 1)
sample(c(4), 1)
sample(c(4), 1)
sample(c(4), 1)
sample(c(4), 1)
?sample
source("proposeverify_model_initacc.R")
RunFitnevaChristiansenExp(c(.5,.2), scond, ord)
X = par[1]+par[2]
wordOrder = c(1,3,5,7,9,11,13,15,17,0,2,4,6,8,10,12,14,16) +1
objOrder =  c(0,2,4,6,8,10,12,14,16,1,3,5,7,9,11,13,15,17) + 1
# familiarization is the same for both conditions (the switching happens after)
fam_m = matrix(0, nrow=18, ncol=18)
for(i in 1:length(wordOrder)) {
fam_m[wordOrder[i],objOrder[i]] = X
}
m= fam_m
m
tr_w = ord[t,c("w1ind","w2ind")]
tr_o = ord[t,c("o1ind","o2ind")]
freq[tr_w] = freq[tr_w] + 1
probs = runif(length(tr_w)) # prob for each word of remembering it's hypothesized obj
forget = tr_w[which(probs > rowSums(m[tr_w,]))]
forget
m[forget,] = m[forget,]*0
have_hypoths = tr_w[which(rowSums(m[tr_w,])!=0)]
have_hypoths
tr_w
tr_o
for(w in have_hypoths) {
hypo = which(m[w,]>0) # hypothesized object
if(!is.element(hypo, tr_o)) {
m[w,] = m[w,]*0 # disconfirmed
} else {
m[w,hypo] = m[w,hypo] + alpha_increase # strengthen
for(s in hypo) {
resps[w,freq[s]] = 1 # know that
}
}
}
words_need_hypoths = tr_w[which(rowSums(m[tr_w,])==0)]
objs_need_hypoths = tr_o[which(colSums(m[,tr_o])==0)]
words_need_hypoths
objs_need_hypoths
tr_o
m[,tr_o]
source("proposeverify_model_initacc.R")
RunFitnevaChristiansenExp(c(.5,.2), scond, ord)
scond
sfits = fitBySubject()
save(sfits, file="subject_fits_withReg_proposeverify.RData")
load("subject_fits_withReg_proposeverify.RData")
agg = aggregate(correct ~ condition + init_acc, data=sfits, mean)
agg$sd = aggregate(correct ~ condition + init_acc, data=sfits, sd)$correct
agg$SE = agg$sd / sqrt(aggregate(correct ~ condition + init_acc, data=sfits, length)$correct - 1)
mag = aggregate(Model ~ condition + init_acc, data=sfits, mean)
mag$sd = aggregate(Model ~ condition + init_acc, data=sfits, sd)$Model
mag$SE = agg$sd / sqrt(aggregate(Model ~ condition + init_acc, data=sfits, length)$Model - 1)
dodge <- position_dodge(width=.9)
limits <- with(agg, aes(ymax=correct+SE, ymin=correct-SE))
a <- ggplot(agg, aes(x=condition, y=correct, fill=init_acc)) + labs(x="Condition", y="Proportion Correct", fill="Initially Accurate") +
geom_bar(stat="identity", position=dodge) + geom_errorbar(limits,  width=0.2, position=dodge) +
geom_point(data=mag, aes(x=condition, y=Model, fill=init_acc), position=dodge) +
geom_hline(yintercept=1/18, linetype='dashed')
#b <- a + geom_hline(yintercept=1/18, linetype='dashed') # + scale_fill_manual(values=c("red", "orange", "yellow"))
print(a)
warnings()
ggsave("initial-accuracy18afc_model_fit_by_subject_proposeverify.pdf", width=5, height=4)
FitChristSSE <- function(par, humdat, cond, ord) {
mdat = RunFitnevaChristiansenExp(par, cond, ord)
return(sum((humdat - mdat)^2)) # regularize parameters
}
sfits = fitBySubject()
save(sfits, file="subject_fits_withReg_proposeverify.RData")
load("subject_fits_withReg_proposeverify.RData")
agg = aggregate(correct ~ condition + init_acc, data=sfits, mean)
agg$sd = aggregate(correct ~ condition + init_acc, data=sfits, sd)$correct
agg$SE = agg$sd / sqrt(aggregate(correct ~ condition + init_acc, data=sfits, length)$correct - 1)
mag = aggregate(Model ~ condition + init_acc, data=sfits, mean)
mag$sd = aggregate(Model ~ condition + init_acc, data=sfits, sd)$Model
mag$SE = agg$sd / sqrt(aggregate(Model ~ condition + init_acc, data=sfits, length)$Model - 1)
dodge <- position_dodge(width=.9)
limits <- with(agg, aes(ymax=correct+SE, ymin=correct-SE))
a <- ggplot(agg, aes(x=condition, y=correct, fill=init_acc)) + labs(x="Condition", y="Proportion Correct", fill="Initially Accurate") +
geom_bar(stat="identity", position=dodge) + geom_errorbar(limits,  width=0.2, position=dodge) +
geom_point(data=mag, aes(x=condition, y=Model, fill=init_acc), position=dodge) +
geom_hline(yintercept=1/18, linetype='dashed')
#b <- a + geom_hline(yintercept=1/18, linetype='dashed') # + scale_fill_manual(values=c("red", "orange", "yellow"))
print(a)
sfits = fitBySubject()
sfits = fitBySubject()
save(sfits, file="subject_fits_withReg_proposeverify.RData")
load("subject_fits_withReg_proposeverify.RData")
agg = aggregate(correct ~ condition + init_acc, data=sfits, mean)
agg$sd = aggregate(correct ~ condition + init_acc, data=sfits, sd)$correct
agg$SE = agg$sd / sqrt(aggregate(correct ~ condition + init_acc, data=sfits, length)$correct - 1)
mag = aggregate(Model ~ condition + init_acc, data=sfits, mean)
mag$sd = aggregate(Model ~ condition + init_acc, data=sfits, sd)$Model
mag$SE = agg$sd / sqrt(aggregate(Model ~ condition + init_acc, data=sfits, length)$Model - 1)
dodge <- position_dodge(width=.9)
limits <- with(agg, aes(ymax=correct+SE, ymin=correct-SE))
a <- ggplot(agg, aes(x=condition, y=correct, fill=init_acc)) + labs(x="Condition", y="Proportion Correct", fill="Initially Accurate") +
geom_bar(stat="identity", position=dodge) + geom_errorbar(limits,  width=0.2, position=dodge) +
geom_point(data=mag, aes(x=condition, y=Model, fill=init_acc), position=dodge) +
geom_hline(yintercept=1/18, linetype='dashed')
#b <- a + geom_hline(yintercept=1/18, linetype='dashed') # + scale_fill_manual(values=c("red", "orange", "yellow"))
print(a)
path = "~/Documents/Lab/Landy/SDT-Changing-Probabilities/Mixed-Design/Data/"
file.names <- dir(path, pattern ="*.csv")
s <- 1
plotDat <- read.csv(file.names[s])
plotDat <- read.csv(path,file.names[s], header = TRUE)
getwd()
setwd()
?dir
setwd(path)
getwd()
path = "~/Documents/Lab/Landy/SDT-Changing-Probabilities/Mixed-Design/Data/"
setwd(path)
file.names <- dir(pattern ="*.csv")
plotDat <- read.csv(file.names[s], header = TRUE)
name <- "SDTChangingProbabilitiesMixed_CWG"
length(name)
name <- 'SDTChangingProbabilitiesMixed_CWG'
name
length(name)
nchar(name)
subName <- substr(name,1,31:33)
subName
subName <- substr(name,1,33)
subName
subName <- substr(name,31,33)
subName
file.names[s]
subName <- substr(file.names[s],31,33)
subName
filename = paste(subName, "critbytrial.png", sep = "_")
filename
path = "~/Documents/Lab/Landy/SDT-Changing-Probabilities/Mixed-Design/Data/"
setwd(path)
file.names <- dir(pattern ="*.csv")
for(s in 1:length(file.names)){
plotDat <- read.csv(file.names[s], header = TRUE)
subName <- substr(file.names[s],31,33)
#yrange <- c(min(plotDat[,c("estCrit","obsCrit")], na.rm = TRUE),max(plotDat[,c("estCrit","obsCrit")],na.rm = TRUE))
2
dev.new(width = 10, height = 6)
gp <- ggplot() +
geom_line(data = plotDat, aes(x = trial, y = omCrit, linetype="Omniscient")) +
geom_point(data = plotDat, aes(x=OvTrial,y=obsCrit, colour='Overt'), shape=1) +
geom_point(data = plotDat, aes(x=wind,y=estCrit, colour='Covert'), shape=1) +
scale_x_continuous(expand = c(0.005,1)) + scale_y_continuous(expand = c(.1, 0.01)) + # I have no idea what these numbers actually do
theme_bw() +  theme(plot.background = element_blank(), panel.border = element_blank(), plot.margin=unit(c(1.5,0,1,1),"cm")) +
scale_colour_manual("", breaks = c("Overt", "Covert"), values = c("blue", "red")) +
scale_linetype_manual("", breaks= "Omniscient", values="dashed") +
labs(title=subName, x = "Trial", y = "Criterion (degrees)")
gp
filename = paste(subName, "critbytrial.png", sep = "_")
ggsave(filename=filename, plot=gp, width = 10, height = 6)
# om.crit.rng <- c(min(plotDat$omCrit)-25,max(plotDat$omCrit)+25)
# yrange <- c(min(plotDat[,c("estCrit","obsCrit")], na.rm = TRUE),max(plotDat[,c("estCrit","obsCrit")],na.rm = TRUE))
om.crit.rng  <- c(-10,100)
yrange <- c(-10,100)
dev.new(width = 6, height = 6)
gp2 <- ggplot() +
geom_point(data = plotDat, aes(x=OvOmCrit,y=obsCrit, colour = "Overt"), shape=1) +
geom_point(data = plotDat, aes(x=CovOmCrit,y=estCrit, colour = "Covert"), shape=1) +
geom_smooth(data = plotDat, aes(x=OvOmCrit, y=obsCrit, colour = "Overt"), size = 0.5, se = FALSE, method = lm, fullrange = TRUE) +
geom_smooth(data = plotDat, aes(x=CovOmCrit, y=estCrit, colour = "Covert"), size = 0.5, se = FALSE, method = "lm", fullrange = TRUE) +
geom_line(aes(x=(-150:200), y=(-150:200), linetype = "Omniscient"), colour = "grey") +
#geom_abline(aes(x=(-150:200), y=(-150:200)), linetype = "dashed", intercept = 0, slope = 1) +
scale_x_continuous(expand = c(0,0), limits=om.crit.rng) + scale_y_continuous(expand = c(0,0), limits=yrange) +
theme_bw() +  theme(plot.background = element_blank(), plot.margin=unit(c(1,0,1,1),"cm")) +
scale_colour_manual("", breaks=c("Overt","Covert"), values=c("blue","red")) +
scale_linetype_manual("", breaks=c("Omniscient","Covert","Overt"), values=c("dashed","solid","solid")) +
labs(title=subName, x="Omniscient Criterion", y="Observed Criterion")
gp2
filename = paste(subName, "obsVom.png", sep = "_")
ggsave(filename=filename, plot=gp2, width = 6, height = 6)
}
warnings()
path = "~/Documents/Lab/Landy/SDT-Changing-Probabilities/Mixed-Design/Data/"
setwd(path)
file.names <- dir(pattern ="*.csv")
#
for(s in 1:length(file.names)){
plotDat <- read.csv(file.names[s], header = TRUE)
subName <- substr(file.names[s],31,33)
#yrange <- c(min(plotDat[,c("estCrit","obsCrit")], na.rm = TRUE),max(plotDat[,c("estCrit","obsCrit")],na.rm = TRUE))
dev.new(width = 10, height = 6)
gp <- ggplot() +
geom_line(data = plotDat, aes(x = trial, y = omCrit, linetype="Omniscient")) +
geom_point(data = plotDat, aes(x=OvTrial,y=obsCrit, colour='Overt'), shape=1) +
geom_point(data = plotDat, aes(x=wind,y=estCrit, colour='Covert'), shape=1) +
scale_x_continuous(expand = c(0.005,1)) + scale_y_continuous(expand = c(.1, 0.01)) + # I have no idea what these numbers actually do
theme_bw() +  theme(plot.background = element_blank(), panel.border = element_blank(), plot.margin=unit(c(1.5,0,1,1),"cm")) +
scale_colour_manual("", breaks = c("Overt", "Covert"), values = c("blue", "red")) +
scale_linetype_manual("", breaks= "Omniscient", values="dashed") +
labs(title=subName, x = "Trial", y = "Criterion (degrees)")
gp
filename = paste(subName, "critbytrial.png", sep = "_")
ggsave(filename=filename, plot=gp, width = 10, height = 6)
# om.crit.rng <- c(min(plotDat$omCrit)-25,max(plotDat$omCrit)+25)
# yrange <- c(min(plotDat[,c("estCrit","obsCrit")], na.rm = TRUE),max(plotDat[,c("estCrit","obsCrit")],na.rm = TRUE))
om.crit.rng  <- c(-10,100)
yrange <- c(-10,100)
dev.new(width = 6, height = 6)
gp2 <- ggplot() +
geom_point(data = plotDat, aes(x=OvOmCrit,y=obsCrit, colour = "Overt"), shape=1) +
geom_point(data = plotDat, aes(x=CovOmCrit,y=estCrit, colour = "Covert"), shape=1) +
geom_smooth(data = plotDat, aes(x=OvOmCrit, y=obsCrit, colour = "Overt"), size = 0.5, se = FALSE, method = lm, fullrange = TRUE) +
geom_smooth(data = plotDat, aes(x=CovOmCrit, y=estCrit, colour = "Covert"), size = 0.5, se = FALSE, method = "lm", fullrange = TRUE) +
geom_line(aes(x=(-150:200), y=(-150:200), linetype = "Omniscient"), colour = "grey") +
#geom_abline(aes(x=(-150:200), y=(-150:200)), linetype = "dashed", intercept = 0, slope = 1) +
scale_x_continuous(expand = c(0,0), limits=om.crit.rng) + scale_y_continuous(expand = c(0,0), limits=yrange) +
theme_bw() +  theme(plot.background = element_blank(), plot.margin=unit(c(1,0,1,1),"cm")) +
scale_colour_manual("", breaks=c("Overt","Covert"), values=c("blue","red")) +
scale_linetype_manual("", breaks=c("Omniscient","Covert","Overt"), values=c("dashed","solid","solid")) +
labs(title=subName, x="Omniscient Criterion", y="Observed Criterion")
gp2
filename = paste(subName, "obsVom.png", sep = "_")
ggsave(filename=filename, plot=gp2, width = 6, height = 6)
}
for(s in 1:length(file.names)){
plotDat <- read.csv(file.names[s], header = TRUE)
subName <- substr(file.names[s],31,33)
#yrange <- c(min(plotDat[,c("estCrit","obsCrit")], na.rm = TRUE),max(plotDat[,c("estCrit","obsCrit")],na.rm = TRUE))
#dev.new(width = 10, height = 6)
gp <- ggplot() +
geom_line(data = plotDat, aes(x = trial, y = omCrit, linetype="Omniscient")) +
geom_point(data = plotDat, aes(x=OvTrial,y=obsCrit, colour='Overt'), shape=1) +
geom_point(data = plotDat, aes(x=wind,y=estCrit, colour='Covert'), shape=1) +
scale_x_continuous(expand = c(0.005,1)) + scale_y_continuous(expand = c(.1, 0.01)) + # I have no idea what these numbers actually do
theme_bw() +  theme(plot.background = element_blank(), panel.border = element_blank(), plot.margin=unit(c(1.5,0,1,1),"cm")) +
scale_colour_manual("", breaks = c("Overt", "Covert"), values = c("blue", "red")) +
scale_linetype_manual("", breaks= "Omniscient", values="dashed") +
labs(title=subName, x = "Trial", y = "Criterion (degrees)")
gp
filename = paste(subName, "critbytrial.png", sep = "_")
ggsave(filename=filename, plot=gp, width = 10, height = 6)
om.crit.rng <- c(min(plotDat$omCrit)-25,max(plotDat$omCrit)+25)
yrange <- c(min(plotDat[,c("estCrit","obsCrit")], na.rm = TRUE),max(plotDat[,c("estCrit","obsCrit")],na.rm = TRUE))
# om.crit.rng  <- c(-10,100)
# yrange <- c(-10,100)
#dev.new(width = 6, height = 6)
gp2 <- ggplot() +
geom_point(data = plotDat, aes(x=OvOmCrit,y=obsCrit, colour = "Overt"), shape=1) +
geom_point(data = plotDat, aes(x=CovOmCrit,y=estCrit, colour = "Covert"), shape=1) +
geom_smooth(data = plotDat, aes(x=OvOmCrit, y=obsCrit, colour = "Overt"), size = 0.5, se = FALSE, method = lm, fullrange = TRUE) +
geom_smooth(data = plotDat, aes(x=CovOmCrit, y=estCrit, colour = "Covert"), size = 0.5, se = FALSE, method = "lm", fullrange = TRUE) +
geom_line(aes(x=(-150:200), y=(-150:200), linetype = "Omniscient"), colour = "grey") +
#geom_abline(aes(x=(-150:200), y=(-150:200)), linetype = "dashed", intercept = 0, slope = 1) +
scale_x_continuous(expand = c(0,0), limits=om.crit.rng) + scale_y_continuous(expand = c(0,0), limits=yrange) +
theme_bw() +  theme(plot.background = element_blank(), plot.margin=unit(c(1,0,1,1),"cm")) +
scale_colour_manual("", breaks=c("Overt","Covert"), values=c("blue","red")) +
scale_linetype_manual("", breaks=c("Omniscient","Covert","Overt"), values=c("dashed","solid","solid")) +
labs(title=subName, x="Omniscient Criterion", y="Observed Criterion")
gp2
filename = paste(subName, "obsVom.png", sep = "_")
ggsave(filename=filename, plot=gp2, width = 6, height = 6)
}
